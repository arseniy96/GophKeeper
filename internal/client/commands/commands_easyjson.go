// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package commands

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF64fc67eDecodeGithubComArseniy96GophKeeperInternalClientCommands(in *jlexer.Lexer, out *TextData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF64fc67eEncodeGithubComArseniy96GophKeeperInternalClientCommands(out *jwriter.Writer, in TextData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TextData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF64fc67eEncodeGithubComArseniy96GophKeeperInternalClientCommands(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TextData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF64fc67eEncodeGithubComArseniy96GophKeeperInternalClientCommands(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TextData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF64fc67eDecodeGithubComArseniy96GophKeeperInternalClientCommands(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TextData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF64fc67eDecodeGithubComArseniy96GophKeeperInternalClientCommands(l, v)
}
func easyjsonF64fc67eDecodeGithubComArseniy96GophKeeperInternalClientCommands1(in *jlexer.Lexer, out *PasswordData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "site":
			out.Site = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF64fc67eEncodeGithubComArseniy96GophKeeperInternalClientCommands1(out *jwriter.Writer, in PasswordData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"site\":"
		out.RawString(prefix[1:])
		out.String(string(in.Site))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PasswordData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF64fc67eEncodeGithubComArseniy96GophKeeperInternalClientCommands1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PasswordData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF64fc67eEncodeGithubComArseniy96GophKeeperInternalClientCommands1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PasswordData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF64fc67eDecodeGithubComArseniy96GophKeeperInternalClientCommands1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PasswordData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF64fc67eDecodeGithubComArseniy96GophKeeperInternalClientCommands1(l, v)
}
func easyjsonF64fc67eDecodeGithubComArseniy96GophKeeperInternalClientCommands2(in *jlexer.Lexer, out *FileData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF64fc67eEncodeGithubComArseniy96GophKeeperInternalClientCommands2(out *jwriter.Writer, in FileData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FileData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF64fc67eEncodeGithubComArseniy96GophKeeperInternalClientCommands2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FileData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF64fc67eEncodeGithubComArseniy96GophKeeperInternalClientCommands2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FileData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF64fc67eDecodeGithubComArseniy96GophKeeperInternalClientCommands2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FileData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF64fc67eDecodeGithubComArseniy96GophKeeperInternalClientCommands2(l, v)
}
func easyjsonF64fc67eDecodeGithubComArseniy96GophKeeperInternalClientCommands3(in *jlexer.Lexer, out *CardData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "number":
			out.Number = string(in.String())
		case "exp_date":
			out.ExpDate = string(in.String())
		case "card_holder":
			out.CardHolder = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF64fc67eEncodeGithubComArseniy96GophKeeperInternalClientCommands3(out *jwriter.Writer, in CardData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.String(string(in.Number))
	}
	{
		const prefix string = ",\"exp_date\":"
		out.RawString(prefix)
		out.String(string(in.ExpDate))
	}
	{
		const prefix string = ",\"card_holder\":"
		out.RawString(prefix)
		out.String(string(in.CardHolder))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CardData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF64fc67eEncodeGithubComArseniy96GophKeeperInternalClientCommands3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CardData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF64fc67eEncodeGithubComArseniy96GophKeeperInternalClientCommands3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CardData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF64fc67eDecodeGithubComArseniy96GophKeeperInternalClientCommands3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CardData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF64fc67eDecodeGithubComArseniy96GophKeeperInternalClientCommands3(l, v)
}
